// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4680.Eduino;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;

import org.usfirst.frc4680.Eduino.commands.*;
import org.usfirst.frc4680.Eduino.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    final static String logFileName = "/home/lvuser/logfile.csv";
    private HashMap<String, Object> logEntry;
    private ArrayList<HashMap<String, Object>> dataLog;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static LongArm longArm;
    public static Grabber grabber;
    public static Climber climber;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static Compressor compressor;


    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    	dataLog = new ArrayList<HashMap<String, Object>>() ;
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        longArm = new LongArm();
        grabber = new Grabber();
        climber = new Climber();
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Do Nothing", new AutonomousCommand());
        chooser.addObject("Cross the Line", new BetterCrossLineAndStop());
        chooser.addObject("Center - Place on Switch", new PlaceCubeOnSwitch());
        chooser.addObject("Start Right", new RightSideStart());
        chooser.addObject("Start Left", new LeftSideStart());
        chooser.addObject("Switch Height", new LongArmPosition(LongArmPosition.SWITCH_HEIGHT));
        chooser.addObject("Scale Height", new LongArmPosition(LongArmPosition.SCALE_HEIGHT));
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        
        compressor = new Compressor(0);
        compressor.setClosedLoopControl(true);
        
        CameraServer.getInstance().startAutomaticCapture(0);
        //CameraServer.getInstance().startAutomaticCapture(1);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
		if(!dataLog.isEmpty()) {
			System.out.println("Writing " + dataLog.size() + " records to log file");
			try { 
				PrintStream file = new PrintStream(logFileName);
				file.println(dataLog.get(0).keySet());
			    for(HashMap<String, Object> entry : dataLog){
    				file.println(entry.values());
    			} 
			    file.flush(); 
			    file.close(); 
			    System.out.println("Wrote log file: " + logFileName); 
			} catch (IOException e) { 
			    System.out.println("error: " + e.getMessage()); 
			}
			dataLog.clear();
		}

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	Robot.longArm.setPosition(0);
    	Robot.driveTrain.resetPosition();
    	Robot.grabber.close();
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();

    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        logEntry = new HashMap<String, Object>();
        logEntry.put("timestamp", Timer.getFPGATimestamp());
        logEntry.put("encoderR",  Robot.driveTrain.countR);
        logEntry.put("encoderL",  Robot.driveTrain.countL);
        logEntry.put("heading", Robot.driveTrain.getHeading());
        logEntry.put("FR", RobotMap.driveTrainCANTalonFrontRight.getMotorOutputPercent());
        logEntry.put("FL", RobotMap.driveTrainCANTalonFrontLeft.getMotorOutputPercent());
        logEntry.put("BR", RobotMap.driveTrainCANTalonBackRight.getMotorOutputPercent());
        logEntry.put("BL", RobotMap.driveTrainCANTalonBackLeft.getMotorOutputPercent());
        logEntry.put("arm", Robot.longArm.getPosition());
        dataLog.add(logEntry);

    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.grabber.close();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
