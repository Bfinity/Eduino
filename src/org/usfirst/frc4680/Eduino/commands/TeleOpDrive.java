// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4680.Eduino.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4680.Eduino.Robot;
import org.usfirst.frc4680.Eduino.subsystems.DriveTrain;

/**
 *
 */
public class TeleOpDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	double heading;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public TeleOpDrive() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    		heading = Robot.driveTrain.getHeading();
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
	    	double fwdBackCommand = -Robot.oi.driveStick.getY();
	    	double leftRightCommand = Robot.oi.driveStick.getX();
	    	double yawCommand = Robot.oi.driveStick.getRawAxis(4); //axis 4 is the LR axis of the Right stick
	    	
	    	double scaledYaw = yawCommand * Math.abs(yawCommand);
	    	double scaledfwdBack = fwdBackCommand * Math.abs(fwdBackCommand);
	    	double scaledleftRight = leftRightCommand * Math.abs(leftRightCommand);
    	
		if(Robot.oi.driveStick.getRawButton(1)) {
			Robot.driveTrain.keepHeadingDrive(scaledfwdBack, scaledleftRight, heading);
		} else {
			Robot.driveTrain.teleopDrive(scaledfwdBack, scaledleftRight, scaledYaw);
			heading = Robot.driveTrain.getHeading();
		}
		
		SmartDashboard.putNumber("heading", Robot.driveTrain.getHeading());
		SmartDashboard.putNumber("fwdBackDistance", Robot.driveTrain.getFwdBwdDistance());
		SmartDashboard.putNumber("leftRightDistance", Robot.driveTrain.getLeftRightDistance());
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
